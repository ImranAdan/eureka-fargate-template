name: Terraform Tests

on:
  push:
    paths:
      - 'terraform/modules/*/tests/**'
      - 'terraform/modules/*/main.tf'
      - 'terraform/modules/*/variables.tf'
      - 'terraform/modules/*/outputs.tf'
      - 'terraform/*.tf'
  
  pull_request:
    paths:
      - 'terraform/modules/*/tests/**'
      - 'terraform/modules/*/main.tf'
      - 'terraform/modules/*/variables.tf'
      - 'terraform/modules/*/outputs.tf'
      - 'terraform/*.tf'

jobs:
  terraform-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper diff
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"  # Adjust version as needed
      
      - name: Run tests for changed modules only
        run: |
          # Determine which files changed based on event type
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, compare against the base branch
            changed_files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          else
            # For pushes, compare against the previous commit
            changed_files=$(git diff --name-only HEAD~1..HEAD)
          fi
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Extract unique modules that have changes
          changed_modules=$(echo "$changed_files" | grep -E '^terraform/modules/[^/]+/' | sed 's|^terraform/modules/\([^/]*\)/.*|\1|' | sort -u)
          
          echo "Changed modules: $changed_modules"
          
          # Exit early if no modules changed
          if [ -z "$changed_modules" ]; then
            echo "No terraform modules changed, skipping tests"
            exit 0
          fi
          
          # Run tests for each changed module
          for module in $changed_modules; do
            module_path="terraform/modules/$module"
            
            echo "================================================"
            echo "Processing module: $module"
            echo "================================================"
            
            if [ -d "$module_path/tests" ]; then
              echo "Running tests for module: $module"
              cd "$module_path"
              
              # Initialize terraform
              terraform init
              
              # Run tests
              if terraform test; then
                echo "✅ Tests passed for module: $module"
              else
                echo "❌ Tests failed for module: $module"
                exit 1
              fi
              
              # Return to root directory
              cd - > /dev/null
            else
              echo "⚠️  No tests directory found for module: $module"
            fi
          done
          
          echo "================================================"
          echo "All module tests completed successfully!"
          echo "================================================"

  # Optional: Validate terraform syntax for changed modules
  terraform-validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
      
      - name: Validate changed modules
        run: |
          # Determine which files changed
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            changed_files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          else
            changed_files=$(git diff --name-only HEAD~1..HEAD)
          fi
          
          # Extract unique modules that have changes
          changed_modules=$(echo "$changed_files" | grep -E '^terraform/modules/[^/]+/' | sed 's|^terraform/modules/\([^/]*\)/.*|\1|' | sort -u)
          
          if [ -z "$changed_modules" ]; then
            echo "No terraform modules changed, skipping validation"
            exit 0
          fi
          
          # Validate each changed module
          for module in $changed_modules; do
            module_path="terraform/modules/$module"
            
            echo "Validating module: $module"
            cd "$module_path"
            
            terraform init
            terraform validate
            
            cd - > /dev/null
          done
          
          # Also validate main terraform files if they changed
          if echo "$changed_files" | grep -q '^terraform/[^/]*\.tf$'; then
            echo "Validating main terraform configuration"
            cd terraform
            terraform init
            terraform validate
            cd - > /dev/null
          fi