name: Full Rebuild Pipeline

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  destroy-infra:
    name: Destroy existing infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false
      - name: Terraform Destroy
        working-directory: terraform
        run: terraform destroy -auto-approve -input=false

  apply-oidc-infra:
    name: Apply OIDC prerequisites (OIDC provider + IAM roles)
    runs-on: ubuntu-latest
    needs: destroy-infra
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false
      - name: Terraform Apply OIDC components
        working-directory: terraform
        # Replace these targets with your exact OIDC provider + IAM role resources
        run: terraform apply -auto-approve -input=false \
          -target=aws_iam_openid_connect_provider.github \
          -target=aws_iam_role.github-oidc-ecr-push

  create-ecr:
    name: Create ECR repositories
    runs-on: ubuntu-latest
    needs: apply-oidc-infra
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false
      - name: Terraform Apply (ECR only)
        working-directory: terraform
        run: terraform apply -auto-approve -input=false \
          -target=aws_ecr_repository.eureka \
          -target=aws_ecr_repository.config-server \
          -target=aws_ecr_repository.battle-service

  build-eureka:
    name: Build & Push Eureka image
    needs: create-ecr
    uses: ./.github/workflows/build-and-push.yml
    with:
      working-directory: ./eureka
      ecr-repo: eureka-server
    secrets:
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}

  build-config:
    name: Build & Push Config Server image
    needs: create-ecr
    uses: ./.github/workflows/build-and-push.yml
    with:
      working-directory: ./configserver
      ecr-repo: config-server
    secrets:
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
      git-config-uri: ${{ secrets.GIT_CONFIG_URI }}
      git-config-username: ${{ secrets.GIT_CONFIG_USERNAME }}
      git-config-token: ${{ secrets.GIT_CONFIG_TOKEN }}

  build-battle:
    name: Build & Push Battle Service image
    needs: create-ecr
    uses: ./.github/workflows/build-and-push.yml
    with:
      working-directory: ./battle-service
      ecr-repo: battle-service
    secrets:
      aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}

  apply-infra:
    name: Apply the remaining infrastructure
    runs-on: ubuntu-latest
    needs: [build-eureka, build-config, build-battle]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false
      - name: Terraform Apply (everything else)
        working-directory: terraform
        run: terraform apply -auto-approve -input=false
